import { Injectable } from '@nestjs/common';
import { readdir, unlink } from 'fs/promises';
import { join, extname } from 'path';
import { randomBytes } from 'crypto';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MediaFile } from '../../entities/media-file.entity';

@Injectable()
export class MediaService {
  constructor(
    @InjectRepository(MediaFile)
    private mediaFileRepository: Repository<MediaFile>,
  ) {}
  async uploadFile(file: Express.Multer.File) {
    // Use the filename generated by Multer (random hex) as our hash key
    const stored = file.filename;
    const url = `/uploads/${stored}`;
    const hash = stored.replace(extname(stored), '');
    await this.mediaFileRepository.save({
      hash,
      url,
      relativePath: stored,
      originalName: file.originalname,
      mimeType: file.mimetype,
      size: file.size,
    });
    return {
      filename: stored,
      originalname: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      url,
      hash,
    };
  }

  async getAllFiles() {
    const entries = await this.mediaFileRepository.find({ order: { createdAt: 'DESC' } });
    return entries.map(e => ({ filename: e.relativePath, url: e.url, hash: e.hash }));
  }

  async deleteFile(filename: string) {
    const filePath = join(process.cwd(), 'uploads', filename);
    try {
      await unlink(filePath);
      return { success: true, message: 'File deleted successfully' };
    } catch (error) {
      throw new Error('File not found or could not be deleted');
    }
  }
}
